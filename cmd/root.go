// Copyright (c) 2020 Kevin L. Mitchell
//
// Licensed under the Apache License, Version 2.0 (the "License"); you
// may not use this file except in compliance with the License.  You
// may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.  See the License for the specific language governing
// permissions and limitations under the License.

package cmd

import (
	"fmt"
	"io"
	"os"

	"github.com/spf13/cobra"

	"github.com/klmitch/overcover/coverage"
)

// Variables used to store the values of flags.
var (
	threshold    float64
	coverprofile string
)

// Variables used for mocking for the tests.
var (
	stdout io.Writer = os.Stdout
	stderr io.Writer = os.Stderr
	exit   func(int) = os.Exit
)

// rootCmd describes the overcover command to cobra.
var rootCmd = &cobra.Command{
	Use:   "overcover",
	Short: "Golang overall coverage tool with threshold enforcement",
	Long:  `A tool for reporting and testing the overall test suite coverage of a test suite written in go.  This parses the coverage profile output file (generated by passing a filename to the "-coverprofile" option of "go test") and reports the overall coverage of the test suite.  It can also test that the coverage meets a certain minimum threshold.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Load the coverage; this reads the coverage profile
		// and sums the statement counts
		file, err := os.Open(coverprofile)
		if err != nil {
			fmt.Fprintf(stderr, "Unable to open coverage profile file: %s\n", err)
			exit(2)
		}
		defer file.Close()
		cov, err := coverage.LoadCoverage(file)
		if err != nil {
			fmt.Fprintf(stderr, "Unable to read coverage profile file: %s\n", err)
			exit(3)
		}

		// Compute the overall coverage and emit it
		coverage := float64(cov.Executed) / float64(cov.Total) * 100.0
		fmt.Fprintf(stdout, "%d statements out of %d covered; overall coverage: %.1f%%\n", cov.Executed, cov.Total, coverage)

		// Verify that we met the threshold
		if threshold > 0.0 && coverage < threshold {
			fmt.Fprintf(stderr, "\nFailed to meet coverage threshold of %.1f%%\n", threshold)
			exit(1)
		}
	},
}

// Execute is the entrypoint for overcover.  This invokes the root
// command, which performs all the work.
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintln(stderr, err)
		exit(4)
	}
}

// init initializes the flags for overcover.
func init() {
	rootCmd.Flags().Float64Var(&threshold, "threshold", 0, "Set the minimum threshold for coverage; coverage below this threshold will result in an error.")
	rootCmd.Flags().StringVar(&coverprofile, "coverprofile", "coverage.out", "Specify the coverage profile file to read.")
}
